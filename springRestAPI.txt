Topics
-------------------------------------
Spring
Spring Boot
Rest webservices
couchdb
CI/CD
Maven
-------------------------------
JDK17---Java development Kit
JRE ---Java Runtime Environment
------------------------------------------------
core java we can use jdk all the lib files are present in it.
JDBC(1 jar),Servlet(1 jar),JSP(1 jar),spring(20 jars),spring MVC(25 jars),Hibernate(15)-----these libs are not present in JDK so we need to add the external jar files.
when the version change we have to upgrade the jar files also.
Maven :- In maven there will be automatic download to jar files.we have to mention the jar file version.
We have maven repository .where the different versions of jar files available.

we create a POM.xml(project object model) file to mention the jar files required for the program.
----------------------------------------------------------------------------------------------------------------------
to create a project:-
file---new---spring starter project
---------------------------------------------------------------
In spring we have 3 types of container
1)core (BeanFactory)
2)J2EE (ApplicationContext)
3)MVC(WebApplicationContext)
---------------------------------------------------------
work of container
1)to read the web.xml
2)create instances(object)
3)manage life cycle methods.
------------------------------------------------------
example-1
------------------
package com.example.demo;

import org.springframework.stereotype.Component;

@Component("calc")  <--------Object of Calculator class
public class Calculator 
{
public int sum(int a,int b)
{
	return a+b;
}
}
------------------------------------------------------------------------------------------------
package com.example.demo;

import java.util.Scanner;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ApplicationContext;

@SpringBootApplication
public class SpringBootPoject1Application {

	public static void main(String[] args)
{
		ApplicationContext ac=SpringApplication.run(SpringBootPoject1Application.class, args);
		Calculator c1=ac.getBean("calc",Calculator.class);
		System.out.println("enter 2 nos");
		Scanner ob=new Scanner(System.in);
		int a=ob.nextInt();
		int b=ob.nextInt();
		System.out.println("The sum of 2 nos are"+c1.sum(a, b));
	}

}
--------------------------------------------------------------------------------------------------------------------
example-2
-------------------
package com.example.demo;

import java.util.Scanner;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ApplicationContext;

@SpringBootApplication
public class SpringBootPoject1Application {

	public static void main(String[] args)
{
		ApplicationContext ac=SpringApplication.run(SpringBootPoject1Application.class, args);
		Calculator c1=ac.getBean("calc",Calculator.class);
		System.out.println("enter 2 nos");
		Scanner ob=new Scanner(System.in);
		int a=ob.nextInt();
		int b=ob.nextInt();
		System.out.println("The sum of 2 nos are"+c1.sum(a, b));
		
		System.out.println("enter 2 nos");
		int c=ob.nextInt();
		int d=ob.nextInt();
		System.out.println("The sub of 2 nos are"+c1.sub(c, d));
		
		c1.welcome();
		
	}

}
------------------------------------------------------------------------------
package com.example.demo;

import org.springframework.stereotype.Component;

@Component("calc")
public class Calculator 
{
public int sum(int a,int b)
{
	return a+b;
}

public int sub(int a,int b)
{
	return a-b;
}

public void welcome()
{
	System.out.println("welcome to spring boot");
}
}
-----------------------------------------------------------------------------------
example-3
------------------
package com.example.demo;

import java.util.Scanner;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ApplicationContext;

@SpringBootApplication
public class SpringBootPoject2Application {

	public static void main(String[] args) {
		ApplicationContext ac=SpringApplication.run(SpringBootPoject2Application.class, args);
		Employee obj1=ac.getBean("emp",Employee.class);
		obj1.input(101, "sandip",45600.0f);
		obj1.display();
		
		
		Employee obj2=ac.getBean("emp",Employee.class);
		System.out.println("enter empno,name and salary");
		Scanner ob=new Scanner(System.in);
		int e=ob.nextInt();
		String n=ob.next();
		float s=ob.nextFloat();
		obj1.input(e,n,s);
		obj1.display();
		
		Test1 obj3=ac.getBean("test1",Test1.class);
		System.out.println("enter a no");
		int x=ob.nextInt();
		System.out.println("the square of a no is "+obj3.square(x));
		
	}

}
--------------------------------------------------------------------------------
package com.example.demo;

import org.springframework.stereotype.Component;

@Component("emp")
public class Employee 
{
int empno;
String name;
float sal;
void input(int empno,String name,float sal)
{
	this.empno=empno;
	this.name=name;
	this.sal=sal;
}
void display()
{
	System.out.println("the empno is "+empno);
	System.out.println("the empname is "+name);
	System.out.println("the empsal is "+sal);
	}
}
-------------------------------------------------------------------------------
package com.example.demo;

import org.springframework.stereotype.Component;

@Component("test1")
public class Test1 
{
public int square(int i)
{
	return i*i;
}
}
------------------------------------------------------------------------------------------------
Example of JPA
--------------------------
src/main/java :- we write the java class files.
src/main/resources :- requirements for running the java programs
-------------------------------------------------------------------------------------------------------
application.proporties
--------------------------------
server.port=8090

spring.datasource.driver-class-name=oracle.jdbc.driver.OracleDriver
spring.datasource.url=jdbc:oracle:thin:@localhost:1521:xe
spring.datasource.username=system
spring.datasource.password=1234

spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=create
spring.jpa.database-platform=org.hibernate.dialect.Oracle10Dialect
---------------------------------------------------------------------------------------------------------------
In spring boot the tomcate server is embeded
server.port=8090
------------------------------------
load the driver
spring.datasource.driver-class-name=oracle.jdbc.driver.OracleDriver
--------------------------------------------------------------------------------------------
url 
spring.datasource.url=jdbc:oracle:thin:@localhost:1521:xe
xe is the database name
1521 is the default port no of oracle
localhost means both client and database server reside in the same system.
in place of localhost in real time it will be the database server port no :- 172.123.21.43
thin is the driver type
oracle is the software.
------------------------------------------------------------------------------------------------
spring.jpa.show-sql=true 
this will display the automatic querry generated
-------------------------------------------------------------------------
spring.jpa.hibernate.ddl-auto=create/insert/update/delete
this will create the querry.
----------------------------------------------------------------------------- 
spring.jpa.database-platform=org.hibernate.dialect.Oracle10Dialect
it is a library 
----------------------------------------------------------------------------------------
pom.xml
-------------------
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.6.3</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.example</groupId>
	<artifactId>SpringBootPoject-3</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>SpringBootPoject-3</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>11</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>
<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		
		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
			<scope>provided</scope>
		</dependency>
		
		<dependency>
			<groupId>com.oracle.database.jdbc</groupId>
			<artifactId>ojdbc8</artifactId>
			<version>19.10.0.0</version>
		</dependency>
		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>
---------------------------------------------------------------------------------------------------------------------------------------
pojo class
----------------------
Employee.java
--------------------------------
package com.example.demo;

import javax.persistence.*;
@Entity
@Table(name="AmdocsEmployee")
public class Employee 
{
	@Id
	@Column(name="empid")
	@GeneratedValue
	private Integer empid;
	@Column(name="ename")
	private String empName;
	@Column(name="esal")
	private Double empSal;
	
public Employee() {
		
	}
public Employee(String empName,Double empSal)
{
	this.empName=empName;
	this.empSal=empSal;
}
public Integer getEmpid() {
	return empid;
}
public void setEmpid(Integer empid) {
	this.empid = empid;
}
public String getEmpName() {
	return empName;
}
public void setEmpName(String empName) {
	this.empName = empName;
}
public Double getEmpSal() {
	return empSal;
}
public void setEmpSal(Double empSal) {
	this.empSal = empSal;
}
public Employee(Integer empid, String empName, Double empSal) {
	super();
	this.empid = empid;
	this.empName = empName;
	this.empSal = empSal;
}
@Override
public String toString() {
	return "Employee [empid=" + empid + ", empName=" + empName + ", empSal=" + empSal + "]";
}

}
----------------------------------------------------------------------------------------------------
EmployeeRepository.java
---------------------------------------------
package com.example.demo;

import org.springframework.data.jpa.repository.JpaRepository;

public interface EmployeeRepository extends JpaRepository<Employee,Integer>
{

}
---------------------------------------------------------------------------------------------------------------
EmployeeTest.java
------------------------------------
package com.example.demo;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

@Component
public class EmployeeTest implements CommandLineRunner
{
@Autowired  //has-a relationship
private EmployeeRepository repo;
	@Override
	public void run(String... args) throws Exception 
	{
	repo.save(new Employee("sandip",98000.45));
	repo.save(new Employee("kiran",98000.45));	
	}

}
----------------------------------------------------------------------------------------------------------------
package com.example.demo;

import java.util.Arrays;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

@Component
public class EmployeeTest implements CommandLineRunner
{
@Autowired
private EmployeeRepository repo;
	@Override
	public void run(String... args) throws Exception 
	{
	repo.save(new Employee("sandip",98000.45));
	repo.save(new Employee("kiran",98000.45));	
	repo.save(new Employee("sunil",88000.45));
	repo.save(new Employee("Hari",78000.45));	
	repo.save(new Employee("Anil",68000.45));
	repo.save(new Employee("Amit",58000.45));	
	
	repo.saveAll(Arrays.asList(
			new Employee("Niraj",35000.43),
			new Employee("Madhu",45000.43),
			new Employee("Tanishq",55000.43),
			new Employee("Vishal",55000.43)
					));
	
	boolean exist=repo.existsById(8);
	System.out.println(exist);
	System.out.println("*****************************");
	repo.findAll().forEach(System.out::println);
	repo.findAllById(Arrays.asList(5,6,7,8)).forEach(System.out::println);
//	repo.deleteAll();
//	repo.findAll().forEach(System.out::println);
	}

}
----------------------------------------------------------------------------------------------------